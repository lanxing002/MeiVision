    lua_State *L = lua_open();
    luaL_openlibs(L);

    luaL_dofile(L,"gettabletest.lua");  // 加载执行lua文件
    lua_getglobal(L,"information");     // 将全局表压入栈

    lua_pushstring(L, "age");           // 将要取的变量压入栈
    lua_gettable(L, -2);                // 取information.age的值   -->gettable用法
    if(lua_isnil(L, -1))
    {
        printf("c++ --> information.age = nil\n");
    }
    else
    {
        printf("c++ --> information.age = %d\n", lua_tointeger(L, -1));
    }
    lua_pop(L,1);                       // 弹出栈顶变量

    lua_pushstring(L, "address");       // 将要取的变量压入栈
    lua_gettable(L, -2);                // 取information.address的值
    if(lua_isnil(L, -1))
    {
        printf("\nc++ --> information.address = nil\n");
    }
    else
    {
        printf("\nc++ --> information.address = %s\n", lua_tostring(L, -1));
    }
    lua_pop(L,1);                       // 弹出栈顶变量


    lua_pushstring(L, "address");       // 将要赋值的变量压入栈
    lua_pushstring(L, "beijing");       // 将赋值的结果压入栈
    lua_settable(L, -3);                // 赋值操作                 -->settable用法

    lua_getglobal(L, "func_printaddr"); // 调用打印函数
    lua_pcall(L, 0, 0, 0);

    lua_close(L);                   //关闭lua环境  